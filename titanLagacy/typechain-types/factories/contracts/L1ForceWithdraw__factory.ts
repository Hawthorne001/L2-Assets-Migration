/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  L1ForceWithdraw,
  L1ForceWithdrawInterface,
} from "../../contracts/L1ForceWithdraw";

const _abi = [
  {
    inputs: [],
    name: "doActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_old",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_new",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "editMigration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_claimer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "generateKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "migrattionClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Type.ClaimParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "migrattionClaimAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "registry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "verifyRegistry",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052341561000f57600080fd5b61101b8061001f608039806080f3fe60406080815260043610610191576000803560e01c631797194781146100665763472bfc9281146100b7576357490b0681146100db57635f329029811461010e57639f03649d81146101345763aaaf7c4581146101515763e41e6c9381146101715761018e565b3415610070578182fd5b61007936610197565b610083818361071e565b8551815173ffffffffffffffffffffffffffffffffffffffff168152602080830151908201529092509050604081f35b0381f35b34156100c1578182fd5b6100ca3661024f565b6100d48183610abe565b5050818351f35b34156100e5578182fd5b6100ee36610299565b6100f9818385610923565b925050508351806100b3838390815260200190565b3415610118578182fd5b610121366102f6565b61012c818385610806565b505050818351f35b341561013e578182fd5b61014736610197565b6100d481836108da565b341561015b578182fd5b61016436610349565b61016c610379565b818351f35b341561017b578182fd5b61018436610197565b6100d4818361041c565b50505b50600080fd5b60008060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc840112156101ca57600080fd5b60043567ffffffffffffffff808211156101e357600080fd5b8460238301126101f257600080fd5b81600401358181111561020457600080fd5b8560248260061b850101111561021957600080fd5b602483019450809350505050915091565b73ffffffffffffffffffffffffffffffffffffffff8116811461024c57600080fd5b50565b60008060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8401121561028257600080fd5b60043561028e8161022a565b936024359350915050565b600080600060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc850112156102ce57600080fd5b6004356102da8161022a565b92506024356102e88161022a565b929492935050604435919050565b600080600060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8501121561032b57600080fd5b600435925060243591506044356103418161022a565b929491935050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201121561024c57600080fd5b33156103de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920436c6f7365720000000000000000000000000000000000000000006044820152606481fd5b60016103e8610f95565b01805460ff80821615167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082161782555050565b3315610481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920436c6f7365720000000000000000000000000000000000000000006044820152606481fd5b610489610f95565b60005b8381101561054c576020806104a28387876105b2565b0135600052828152604073ffffffffffffffffffffffffffffffffffffffff8160002054161561053a576104d78387876105b2565b356104e18161022a565b826104ed8589896105b2565b0135600090815285845282902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055505b505061054581610552565b905061048c565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008284106105ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8360061b820190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810181811067ffffffffffffffff82111715610648576106486105f9565b60405250565b6080810181811067ffffffffffffffff82111715610648576106486105f9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156106b2576106b26105f9565b6040525050565b6040516106c581610628565b90565b6000604082360312156106da57600080fd5b6040516040810181811067ffffffffffffffff821117156106fd576106fd6105f9565b604052823561070b8161022a565b8152602092830135928101929092525090565b60006040805181810181811067ffffffffffffffff82111715610743576107436105f9565b82526000808252602080830182905261075a610f95565b9250815b878110156107e85781610772828a8a6105b2565b013583528382526107b561079c8685205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6107d8576107cc6107c7828a8a6105b2565b6106c8565b95505050505050610800565b6107e181610552565b905061075e565b506107f16106b9565b82815290810191909152925050505b92915050565b331561086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920436c6f7365720000000000000000000000000000000000000000006044820152606481fd5b610873610f95565b6000828152602091909152604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091558483529120805490911673ffffffffffffffffffffffffffffffffffffffff8516179055505050565b505050565b60005b828110156108d5576108f08184846105b2565b356108fa8161022a565b610912602061090a8487876105b2565b013582610abe565b5061091c81610552565b90506108dd565b604051606082811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116602084019081529185901b1660348301526048808301869052825260009190606861097a818461066e565b5090519020949350505050565b60006040516020810181811067ffffffffffffffff821117156109ac576109ac6105f9565b80604052600082528192506000368237505090565b60003d8015610a2c573d67ffffffffffffffff8111156109e3576109e36105f9565b604051610a1860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018261066e565b8181528093503d6000602083013e50505090565b606091505090565b8061024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608481fd5b610ac6610f95565b604051606083811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116602084019081523390921b1660348301526048808301869052825260687fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610b3a828561066e565b73ffffffffffffffffffffffffffffffffffffffff915081610b86610b6c865186208860009182526020526040902090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b1693503384149250821580610b99575083155b8015610c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420636c61696d657200000000000000000000000000000000000000000060448201529450606485fd5b50604051606087811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116602084019081523390921b16603483015260488201899052606883810183529195509350610c5b818661066e565b5050610c9f610c77845184208660009182526020526040902090565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b8416925050811590508015610cdd57610cb6610987565b60008082516020840188335af19050610ccd6109c1565b50610cd781610a34565b5061054c565b61054c84338460405160208082017fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616602485015286604485015260448452610d3e8461064e565b60405190851690610d4e81610628565b8381527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484820152813b610dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152846004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606481fd5b6000808651856000865af19450610df981610df36109c1565b87610ed9565b945050505081518015610e1e57610e1e610e198383860101848601610e26565b610e4f565b505050505050565b600060208284031215610e3857600080fd5b81518015158114610e4857600080fd5b9392505050565b8061024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608481fd5b6060818015610eeb5783915050610e48565b835115801590610efd57845185602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020806004830152875180602484015260005b81811015610f5257898101830151848201604401528201610f36565b81811115610f64576000604483860101525b506044837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168501030183fd5b6000604051602081017f4c31427269646765466f72636557697468726177000000000000000000000000815260148252610fce82610628565b9051902091905056fea3646970667358221220b4faf157a3702b031f6ceaa4dab144e884ea836b8716b09ec21fb196c2e555086c6578706572696d656e74616cf564736f6c63430008090041";

type L1ForceWithdrawConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1ForceWithdrawConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1ForceWithdraw__factory extends ContractFactory {
  constructor(...args: L1ForceWithdrawConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<L1ForceWithdraw> {
    return super.deploy(overrides || {}) as Promise<L1ForceWithdraw>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): L1ForceWithdraw {
    return super.attach(address) as L1ForceWithdraw;
  }
  override connect(signer: Signer): L1ForceWithdraw__factory {
    return super.connect(signer) as L1ForceWithdraw__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1ForceWithdrawInterface {
    return new utils.Interface(_abi) as L1ForceWithdrawInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1ForceWithdraw {
    return new Contract(address, _abi, signerOrProvider) as L1ForceWithdraw;
  }
}
