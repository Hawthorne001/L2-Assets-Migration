/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Type {
  export type ClaimParamStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ClaimParamStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type AssetsParamStruct = {
    claimer: PromiseOrValue<string>;
    key: PromiseOrValue<BytesLike>;
  };

  export type AssetsParamStructOutput = [string, string] & {
    claimer: string;
    key: string;
  };
}

export interface L1ForceWithdrawInterface extends utils.Interface {
  functions: {
    "doActive()": FunctionFragment;
    "editMigration(bytes32,bytes32,address)": FunctionFragment;
    "generateKey(address,address,uint256)": FunctionFragment;
    "migrattionClaim(address,uint256)": FunctionFragment;
    "migrattionClaimAll((address,uint256)[])": FunctionFragment;
    "registry((address,bytes32)[])": FunctionFragment;
    "verifyRegistry((address,bytes32)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "doActive"
      | "editMigration"
      | "generateKey"
      | "migrattionClaim"
      | "migrattionClaimAll"
      | "registry"
      | "verifyRegistry"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "doActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "editMigration",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrattionClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrattionClaimAll",
    values: [Type.ClaimParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registry",
    values: [Type.AssetsParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRegistry",
    values: [Type.AssetsParamStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "doActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrattionClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrattionClaimAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyRegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export interface L1ForceWithdraw extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1ForceWithdrawInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    doActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editMigration(
      _old: PromiseOrValue<BytesLike>,
      _new: PromiseOrValue<BytesLike>,
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateKey(
      _token: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    migrattionClaim(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrattionClaimAll(
      _params: Type.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(
      _params: Type.AssetsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRegistry(
      _params: Type.AssetsParamStruct[],
      overrides?: CallOverrides
    ): Promise<[Type.AssetsParamStructOutput]>;
  };

  doActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editMigration(
    _old: PromiseOrValue<BytesLike>,
    _new: PromiseOrValue<BytesLike>,
    claimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateKey(
    _token: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  migrattionClaim(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrattionClaimAll(
    _params: Type.ClaimParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(
    _params: Type.AssetsParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRegistry(
    _params: Type.AssetsParamStruct[],
    overrides?: CallOverrides
  ): Promise<Type.AssetsParamStructOutput>;

  callStatic: {
    doActive(overrides?: CallOverrides): Promise<void>;

    editMigration(
      _old: PromiseOrValue<BytesLike>,
      _new: PromiseOrValue<BytesLike>,
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    generateKey(
      _token: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    migrattionClaim(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrattionClaimAll(
      _params: Type.ClaimParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registry(
      _params: Type.AssetsParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyRegistry(
      _params: Type.AssetsParamStruct[],
      overrides?: CallOverrides
    ): Promise<Type.AssetsParamStructOutput>;
  };

  filters: {};

  estimateGas: {
    doActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editMigration(
      _old: PromiseOrValue<BytesLike>,
      _new: PromiseOrValue<BytesLike>,
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateKey(
      _token: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrattionClaim(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrattionClaimAll(
      _params: Type.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(
      _params: Type.AssetsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRegistry(
      _params: Type.AssetsParamStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    doActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editMigration(
      _old: PromiseOrValue<BytesLike>,
      _new: PromiseOrValue<BytesLike>,
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateKey(
      _token: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrattionClaim(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrattionClaimAll(
      _params: Type.ClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      _params: Type.AssetsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRegistry(
      _params: Type.AssetsParamStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
